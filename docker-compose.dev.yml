services:
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   environment:
  #     - BACKEND_SERVER_URL=http://***REMOVED***:8000
  #   volumes:
  #     - ./frontend/pages:/app/pages
  #     - ./frontend/public:/app/public
  #     - ./frontend/components:/app/components
  #     - ./frontend/styles:/app/styles
  #     - ./frontend/redux:/app/redux
  #   ports:
  #     - 3000:3000
  #   restart: always
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    restart: always
    environment:
      - FINN_HUB_API_KEY=${FINN_HUB_API_KEY}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}

      - MONGO_SERVER_URL=${MONGO_SERVER_URL}
      - MONGO_BACKUP_URL=${MONGO_BACKUP_URL}

      - REDIS_SERVER_URL=${REDIS_SERVER_URL}

      - MEILISEARCH_SERVER_URL=${MEILISEARCH_SERVER_URL}
      - MEILISEARCH_MASTER_KEY=${MEILISEARCH_MASTER_KEY}
    volumes:
      - ./backend/routers:/code/routers
    networks:
      - staging
    ports:
      - 8000:8000
    depends_on:
      - database
      - cache
      - search
  cache:
    container_name: cache
    image: redis:alpine
    restart: always
    networks:
      - staging
    ports:
      - 6379:6379
  database:
    container_name: database
    build:
      context: ./backend/database
      dockerfile: Dockerfile
    volumes:
      - ./backend/database/data.mongo:/data/db
    restart: always
    logging:
      driver: "none"
    networks:
      - staging
    ports:
      - 27017:27017
  search:
    container_name: search
    build:
      context: ./backend/search
      dockerfile: Dockerfile
    volumes:
      - ./backend/search/data.ms:/data/data.ms
    restart: always
    networks:
      - staging
    ports:
      - 7700:7700

  proxy:
    container_name: proxy
    build:
      context: ./proxy
      dockerfile: Dockerfile
    volumes:
      - ./proxy/conf/:/etc/nginx/conf.d/
      - ./proxy/certbot/www:/var/www/certbot/
      - ./proxy/certbot/conf/:/etc/nginx/ssl/
    restart: always
    networks:
      - staging
    ports:
      - 80:80
      - 443:443
    depends_on:
      - backend
  https:
    container_name: https
    image: certbot/certbot:latest
    volumes:
      - ./proxy/certbot/www/:/var/www/certbot/
      - ./proxy/certbot/conf/:/etc/letsencrypt/
    networks:
      - staging
    depends_on:
      - proxy

networks:
  staging:
    driver: bridge
